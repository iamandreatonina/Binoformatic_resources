edge_t <- glmQLFTest(edge_f,contrast = contro) # contrin the results of the DE Analysis
View(edge_t)
DEGs <- as.data.frame(topTags(edge_t,n = 16748 ,p.value = 0.01,sort.by = 'logFC')) # 16748 becasue w e took into consideration all the vatiables inside edge_t, so 99 percent of singificativity of the test
View(DEGs)
DEGs$class <- '='
DEGs$class[which(DEGs$logCPM > 1 & DEGs$logFC > 1.5)] = '+'
DEGs$class[which(DEGs$logCPM > 1 & DEGs$logFC < (-1.5))] = '-'
DEGs <- DEGs[order(DEGs$logFC, decreasing = T),] # we order based on the fold change
View(DEGs)
table(DEGs$class)
input_df<-DEGs
xlabel<- "log2 FC control vs case"
ylabel<-"-log10 p-value"
par(fig=c(0,1, 0,1), mar=c(4,4,1,2), mgp=c(2, 0.75,0))
plot(DEGs$logFC,-log(DEGs$PValue, base=10), xlab=xlabel,ylab = ylabel, col=ifelse(DEGs$class=="=", "grey70", "olivedrab4"), pch=20, frame.plot=TRUE, cex=0.8, main="Volcano plot") %>%
abline(v = 0, lty = 2, col="grey20")
col <- rep('chartreuse4', 100)
col[which(c_anno_df$condition == 'case')] <- 'burlywood3'
pal <- c('blue','white','red')
pal <- colorRampPalette(pal)(100)
heatmap(as.matrix(cpm_table[which(rownames(cpm_table) %in% DEGs$ensembl_gene_id[which(DEGs$class != '=')]),]),ColSideColors = col, cexCol = 0.5,margins = c(4,4), col = pal, cexRow = 0.2)
heatmap(as.matrix(cpm_table_log[which(rownames(cpm_table_log) %in% DEGs$ensembl_gene_id[which(DEGs$class != '=')]),]),ColSideColors = col, cexCol = 0.5, margins = c(4,4), col = pal, cexRow = 0.2)
library(clusterProfiler)
library(org.Hs.eg.db)
convert<-getBM(attributes=c("ensembl_gene_id", "entrezgene_id", "external_gene_name"), filter=c("ensembl_gene_id"), values=DEGs$ensembl_gene_id, mart=ensembl)
DEGs<-merge(DEGs, convert, by.x = "ensembl_gene_id", by.y = "ensembl_gene_id")
DEGs<-DEGs[which(!is.na(DEGs$entrezgene_id)),]
DEGs<-DEGs[-which(duplicated(DEGs$entrezgene_id)),]
UPDegs <- DEGs %>% filter(class == '+') # up regulated
ego_BP_UP <- enrichGO(gene = UPDegs$external_gene_name.x, OrgDb = org.Hs.eg.db, keyType = 'SYMBOL', ont = 'BP',pAdjustMethod = 'BH',pvalueCutoff = 0.05, qvalueCutoff =  0.05)
View(ego_BP_UP)
barplot(ego_BP_UP,showCategory = 10) # first ten enriched terms
dotplot(ego_BP_UP, showCategory= 10)  # first ten enriched terms
heatplot(ego_BP_UP, showCategory = 2)  # gene associated with the top two enriched terms
head(ego_BP_UP,10)
ego_MF_UP <- enrichGO(gene = UPDegs$external_gene_name.x, OrgDb = org.Hs.eg.db, keyType = 'SYMBOL', ont = 'MF',pAdjustMethod = 'BH',pvalueCutoff = 0.05, qvalueCutoff =  0.05)
View(ego_MF_UP)
barplot(ego_MF_UP,showCategory = 10) # first ten enriched terms
dotplot(ego_MF_UP, showCategory= 10 ) # first ten enriched terms
heatplot(ego_MF_UP, showCategory = 2) # gene associated with the top two enriched terms
head(ego_MF_UP,10)
library(pathview)
eWP_UP<-enrichWP(gene=UPDegs$entrezgene_id, organism ='Homo sapiens',pvalueCutoff = 0.05, qvalueCutoff =  0.1)
head(eWP_UP, 10)
DWDegs <- DEGs %>% filter(class == '-')
# biologica process of GO analysis
ego_BP_DW <- enrichGO(gene = DWDegs$external_gene_name.x, OrgDb = org.Hs.eg.db, keyType = 'SYMBOL', ont = 'BP',pAdjustMethod = 'BH',pvalueCutoff = 0.05, qvalueCutoff =  0.05)
View(ego_BP_DW)
barplot(ego_BP_DW,showCategory = 10)
dotplot(ego_BP_DW, showCategory= 10) # orderby default x
heatplot(ego_BP_DW, showCategory = 2)
head(ego_BP_DW,10)
# molecular function GO
ego_MF_DW <- enrichGO(gene = DWDegs$external_gene_name.x, OrgDb = org.Hs.eg.db, keyType = 'SYMBOL', ont = 'MF',pAdjustMethod = 'BH',pvalueCutoff = 0.05, qvalueCutoff =  0.05)
View(ego_MF_DW)
barplot(ego_MF_DW,showCategory = 10)
dotplot(ego_MF_DW, showCategory= 10 )
heatplot(ego_MF_DW, showCategory = 2)
head(ego_MF_DW,10)
# KEGG enrichment
# enrichWP -> retrive the list of genes from the wiki pathways
eWP_DW<-enrichWP(gene=DWDegs$entrezgene_id, organism ='Homo sapiens',pvalueCutoff = 0.05, qvalueCutoff =  0.1)
head(eWP_DW, 10)
library(pathview)
logFC <-UPDegs$logFC
names(logFC) <-UPDegs$entrezgene_id
pathview(gene.data = logFC, pathway.id = 'hsa04928',species = 'human')
Seq_up <- getSequence(id = UPDegs$external_gene_name.x, type = 'hgnc_symbol',seqType = 'gene_flank', upstream = 500,mart = ensembl)
# gene_flank rapresnet the promoters of the genes
View(Seq_up)
library(MotifDb) # an annotateed collection of motifs
new_Seq <- DNAStringSet(Seq_up$gene_flank)
library(PWMEnrich) # for pattern matching
library(PWMEnrich.Hsapiens.background) # package containing background models
library(seqLogo) # plotting the seqLogo of the corresponding motifs
data("PWMLogn.hg19.MotifDb.Hsap")
res_initial = motifEnrichment(new_Seq,PWMLogn.hg19.MotifDb.Hsap,score = 'affinity')
TF_enrichment <- groupReport(res_initial)
TF_enrichment
plot(TF_enrichment[1:5]) # the first 5
tfs<-TF_enrichment$target[1]
tfmotif <- query(MotifDb,tfs)
PWM_tfs <- toPWM(as.list(tfmotif))
ecdf_tfs <- motifEcdf(PWM_tfs, organism = 'hg19', quick = T)
threshlod = log2(quantile(ecdf_tfs$`Hsapiens-hPDI-PDLIM5`, 1-25e-4))
# plot(ecdf_tfs$`Hsapiens-hPDI-PDLIM5`(v = knots(ecdf_tfs$`Hsapiens-hPDI-PDLIM5`)),main = 'ecdf distribution')
threshlod
score = motifScores(new_Seq, PWM_tfs, raw.scores = F, cutoff = threshlod)
length(which(apply(score,1,sum) > 0)) /length(score)
# we count the boxes that have alt least one score major that the threshold, then divided int for their number to get the frequency
write.table(unique(UPDegs$external_gene_name.x),sep = '\t', file = 'UPDEGs.txt',row.names = F, col.names = F, quote = T)
library(igraph)
library(GGally)
# we use the general deg
nodes <- getBM(attributes = c('external_gene_name','ensembl_gene_id','description','gene_biotype','start_position','end_position','chromosome_name',
'strand'), filters = c('ensembl_gene_id'), values =UPDegs$ensembl_gene_id, mart = ensembl)
nodes <- unique(nodes[ ,c(1,3:6)]) # colonna 1 piu da 3 a 6
link <- read.delim('string_interactions.tsv') # update the string file
link <- link %>%  filter(!link$X.node1 %in% c(setdiff(c(link$node2,link$X.node1), nodes$external_gene_name)) & !link$node2 %in% c(setdiff(c(link$node2,link$X.node1), nodes$external_gene_name)))
nodes <- nodes %>% filter(!nodes$external_gene_name %in% c(setdiff( nodes$external_gene_name,c(link$node2,link$X.node1))))
net <- graph_from_data_frame(d = link , directed = F, vertices = nodes )
net
deg_net <- igraph::degree(net, mode ='out')
clrvek_net <- pmax(0,pmin(deg_net,4))
clrname_net <- c('0'='lightgray','1'='#FF1744','2'='#F0A830','3'='#A155B9','4'='#165BAA')
net<-simplify(net)
net<-simplify(net)
net<-igraph::simplify(net)
deg_net <- igraph::degree(net, mode ='out')
clrvek_net <- pmax(0,pmin(deg_net,4))
clrname_net <- c('0'='lightgray','1'='#FF1744','2'='#F0A830','3'='#A155B9','4'='#165BAA')
ggnet2(net,size = 'outdegree', max_size = 3 ,color = clrvek_net, label = T, label.size = 2, legend.position = 'bottom', size.cut = 3, color.legend = 'clr~degree',palette = clrname_net)
c <- igraph::components(net, mode ='strong')
c
net.c <- igraph::simplify(net.c)
deg <- igraph::degree(net.c, mode ='out')
net.c <- induced_subgraph(net, V(net)[which(c$membership == 1)])
net.c <- igraph::simplify(net.c)
deg <- igraph::degree(net.c, mode ='out')
clrvek <- pmax(0,pmin(deg,4))
clrname <- c('0'='lightgray','1'='#FF1744','2'='#F0A830','3'='#A155B9','4'='#165BAA')
ggnet2(net.c,size = 'outdegree', max_size = 4 ,color = clrvek, label = T, label.size = 2, legend.position = 'bottom', size.cut = 5, color.legend = 'clr~degree',palette = clrname)
ggnet2(net,size = 'outdegree', max_size = 3 ,color = clrvek_net, label = T, label.size = 2, legend.position = 'bottom', size.cut = 3, color.legend = 'clr~degree',palette = clrname_net)
ggnet2(net.c,size = 'outdegree', max_size = 4 ,color = clrvek, label = T, label.size = 2, legend.position = 'bottom', size.cut = 5, color.legend = 'clr~degree',palette = clrname)
ggnet2(net,size = 'outdegree', max_size = 3 ,color = clrvek_net, label = T, label.size = 2, legend.position = 'bottom', size.cut = 3, color.legend = 'clr~degree',palette = clrname_net)
ggnet2(net.c,size = 'outdegree', max_size = 4 ,color = clrvek, label = T, label.size = 2, legend.position = 'bottom', size.cut = 5, color.legend = 'clr~degree',palette = clrname)
load('./files/Thyroid_carcinoma.RData')
load('./file/Thyroid_carcinoma.RData')
View(raw_counts_df)
View(c_anno_df)
View(r_anno_df)
library(biomaRt)
library(tidyverse)
library(tidyverse)
listMarts()
ensembl <- useMart(biomart = 'ensembl', dataset = 'hsapiens_gene_ensembl')
filtering <- r_anno_df$ensembl_gene_id
query <- getBM(attributes = c('ensembl_gene_id', 'external_gene_name','gene_biotype'),filters = c('ensembl_gene_id'),values = list(filtering),mart = ensembl)
query_protein_coding <- query %>%
filter(gene_biotype == 'protein_coding')
r_anno_df_pro_cod <- r_anno_df %>%
filter(ensembl_gene_id %in% query_protein_coding$ensembl_gene_id)
raw_count_df_pro_cod <- raw_counts_df[which(rownames(raw_counts_df) %in% query_protein_coding$ensembl_gene_id),]
library(edgeR)
library(fgsea)
count_thr <- 20 # raw counts data retaining only genes with a raw count >20
repl_thr <- 5 # 5 Cases or 5 Control samples
filter_vec <- apply(raw_count_df_pro_cod,1, function(y) max(by(y,c_anno_df$condition, function(x) sum(x >= count_thr))))
#summary of the vector
table(filter_vec)
filter_count_df <- raw_count_df_pro_cod[filter_vec >= repl_thr,]
dim(filter_count_df) # the rows represent the number of transcripts that satisfy the threshold
filter_anno_df <- r_anno_df_pro_cod[rownames(filter_count_df),] # we filter the gene annotation file
dim(filter_anno_df) # the number of row is equal to the number of row of the file filter_count_df
edge_c <- DGEList(counts = filter_count_df, group = c_anno_df$condition, samples = c_anno_df, genes = filter_anno_df)
edge_c
edge_n <- calcNormFactors(edge_c,method = 'TMM')
edge_n # identical to edge_c just a column called normalization factor is added.
cpm_table <- as.data.frame(round(cpm(edge_n),2)) # the library size is scaled by the normalization factor
head(cpm_table)
###########################
cpm_table_log <- as.data.frame(round(log10(cpm(edge_n)+1),2))
head(cpm_table_log)
desing <- model.matrix(~0+group, data = edge_n$samples) # group correspond to the data
colnames(desing) <- levels(edge_n$samples$group)
rownames(desing) <- edge_n$samples$sample
desing
edge_d <- estimateDisp(edge_n,design = desing)
View(edge_d)
edge_f <- glmQLFit(edge_d,design = desing)
View(edge_f)
contro <- makeContrasts('case-control', levels = desing)
edge_t <- glmQLFTest(edge_f,contrast = contro) # contrin the results of the DE Analysis
View(edge_t)
DEGs <- as.data.frame(topTags(edge_t,n = 16748 ,p.value = 0.01,sort.by = 'logFC')) # 16748 becasue w e took into consideration all the vatiables inside edge_t, so 99 percent of singificativity of the test
View(DEGs)
DEGs$class <- '='
DEGs$class[which(DEGs$logCPM > 1 & DEGs$logFC > 1.5)] = '+'
DEGs$class[which(DEGs$logCPM > 1 & DEGs$logFC < (-1.5))] = '-'
DEGs <- DEGs[order(DEGs$logFC, decreasing = T),] # we order based on the fold change
View(DEGs)
table(DEGs$class)
input_df<-DEGs
xlabel<- "log2 FC control vs case"
ylabel<-"-log10 p-value"
par(fig=c(0,1, 0,1), mar=c(4,4,1,2), mgp=c(2, 0.75,0))
plot(DEGs$logFC,-log(DEGs$PValue, base=10), xlab=xlabel,ylab = ylabel, col=ifelse(DEGs$class=="=", "grey70", "olivedrab4"), pch=20, frame.plot=TRUE, cex=0.8, main="Volcano plot") %>%
abline(v = 0, lty = 2, col="grey20")
col <- rep('chartreuse4', 100)
col[which(c_anno_df$condition == 'case')] <- 'burlywood3'
pal <- c('blue','white','red')
pal <- colorRampPalette(pal)(100)
heatmap(as.matrix(cpm_table[which(rownames(cpm_table) %in% DEGs$ensembl_gene_id[which(DEGs$class != '=')]),]),ColSideColors = col, cexCol = 0.5,margins = c(4,4), col = pal, cexRow = 0.2)
heatmap(as.matrix(cpm_table_log[which(rownames(cpm_table_log) %in% DEGs$ensembl_gene_id[which(DEGs$class != '=')]),]),ColSideColors = col, cexCol = 0.5, margins = c(4,4), col = pal, cexRow = 0.2)
library(clusterProfiler)
library(org.Hs.eg.db)
convert<-getBM(attributes=c("ensembl_gene_id", "entrezgene_id", "external_gene_name"), filter=c("ensembl_gene_id"), values=DEGs$ensembl_gene_id, mart=ensembl)
DEGs<-merge(DEGs, convert, by.x = "ensembl_gene_id", by.y = "ensembl_gene_id")
DEGs<-DEGs[which(!is.na(DEGs$entrezgene_id)),]
DEGs<-DEGs[-which(duplicated(DEGs$entrezgene_id)),]
UPDegs <- DEGs %>% filter(class == '+') # up regulated
ego_BP_UP <- enrichGO(gene = UPDegs$external_gene_name.x, OrgDb = org.Hs.eg.db, keyType = 'SYMBOL', ont = 'BP',pAdjustMethod = 'BH',pvalueCutoff = 0.05, qvalueCutoff =  0.05)
View(ego_BP_UP)
barplot(ego_BP_UP,showCategory = 10) # first ten enriched terms
dotplot(ego_BP_UP, showCategory= 10)  # first ten enriched terms
heatplot(ego_BP_UP, showCategory = 2)  # gene associated with the top two enriched terms
head(ego_BP_UP,10)
ego_MF_UP <- enrichGO(gene = UPDegs$external_gene_name.x, OrgDb = org.Hs.eg.db, keyType = 'SYMBOL', ont = 'MF',pAdjustMethod = 'BH',pvalueCutoff = 0.05, qvalueCutoff =  0.05)
View(ego_MF_UP)
barplot(ego_MF_UP,showCategory = 10) # first ten enriched terms
dotplot(ego_MF_UP, showCategory= 10 ) # first ten enriched terms
heatplot(ego_MF_UP, showCategory = 2) # gene associated with the top two enriched terms
head(ego_MF_UP,10)
library(pathview)
eWP_UP<-enrichWP(gene=UPDegs$entrezgene_id, organism ='Homo sapiens',pvalueCutoff = 0.05, qvalueCutoff =  0.1)
head(eWP_UP, 10)
DWDegs <- DEGs %>% filter(class == '-')
# biologica process of GO analysis
ego_BP_DW <- enrichGO(gene = DWDegs$external_gene_name.x, OrgDb = org.Hs.eg.db, keyType = 'SYMBOL', ont = 'BP',pAdjustMethod = 'BH',pvalueCutoff = 0.05, qvalueCutoff =  0.05)
View(ego_BP_DW)
barplot(ego_BP_DW,showCategory = 10)
dotplot(ego_BP_DW, showCategory= 10) # orderby default x
heatplot(ego_BP_DW, showCategory = 2)
head(ego_BP_DW,10)
# molecular function GO
ego_MF_DW <- enrichGO(gene = DWDegs$external_gene_name.x, OrgDb = org.Hs.eg.db, keyType = 'SYMBOL', ont = 'MF',pAdjustMethod = 'BH',pvalueCutoff = 0.05, qvalueCutoff =  0.05)
View(ego_MF_DW)
barplot(ego_MF_DW,showCategory = 10)
dotplot(ego_MF_DW, showCategory= 10 )
heatplot(ego_MF_DW, showCategory = 2)
head(ego_MF_DW,10)
# KEGG enrichment
# enrichWP -> retrive the list of genes from the wiki pathways
eWP_DW<-enrichWP(gene=DWDegs$entrezgene_id, organism ='Homo sapiens',pvalueCutoff = 0.05, qvalueCutoff =  0.1)
head(eWP_DW, 10)
library(pathview)
logFC <-UPDegs$logFC
names(logFC) <-UPDegs$entrezgene_id
pathview(gene.data = logFC, pathway.id = 'hsa04928',species = 'human')
Seq_up <- getSequence(id = UPDegs$external_gene_name.x, type = 'hgnc_symbol',seqType = 'gene_flank', upstream = 500,mart = ensembl)
# gene_flank rapresnet the promoters of the genes
View(Seq_up)
library(MotifDb) # an annotateed collection of motifs
new_Seq <- DNAStringSet(Seq_up$gene_flank)
library(PWMEnrich) # for pattern matching
library(PWMEnrich.Hsapiens.background) # package containing background models
library(seqLogo) # plotting the seqLogo of the corresponding motifs
data("PWMLogn.hg19.MotifDb.Hsap")
res_initial = motifEnrichment(new_Seq,PWMLogn.hg19.MotifDb.Hsap,score = 'affinity')
TF_enrichment <- groupReport(res_initial)
TF_enrichment
plot(TF_enrichment[1:5]) # the first 5
tfs<-TF_enrichment$target[1]
tfmotif <- query(MotifDb,tfs)
PWM_tfs <- toPWM(as.list(tfmotif))
ecdf_tfs <- motifEcdf(PWM_tfs, organism = 'hg19', quick = T)
threshlod = log2(quantile(ecdf_tfs$`Hsapiens-hPDI-PDLIM5`, 1-25e-4))
# plot(ecdf_tfs$`Hsapiens-hPDI-PDLIM5`(v = knots(ecdf_tfs$`Hsapiens-hPDI-PDLIM5`)),main = 'ecdf distribution')
threshlod
score = motifScores(new_Seq, PWM_tfs, raw.scores = F, cutoff = threshlod)
length(which(apply(score,1,sum) > 0)) /length(score)
# we count the boxes that have alt least one score major that the threshold, then divided int for their number to get the frequency
write.table(unique(UPDegs$external_gene_name.x),sep = '\t', file = 'UPDEGs.txt',row.names = F, col.names = F, quote = T)
library(igraph)
library(GGally)
# we use the general deg
nodes <- getBM(attributes = c('external_gene_name','ensembl_gene_id','description','gene_biotype','start_position','end_position','chromosome_name',
'strand'), filters = c('ensembl_gene_id'), values =UPDegs$ensembl_gene_id, mart = ensembl)
nodes <- unique(nodes[ ,c(1,3:6)]) # colonna 1 piu da 3 a 6
link <- read.delim('string_interactions.tsv') # update the string file
link <- link %>%  filter(!link$X.node1 %in% c(setdiff(c(link$node2,link$X.node1), nodes$external_gene_name)) & !link$node2 %in% c(setdiff(c(link$node2,link$X.node1), nodes$external_gene_name)))
nodes <- nodes %>% filter(!nodes$external_gene_name %in% c(setdiff( nodes$external_gene_name,c(link$node2,link$X.node1))))
net <- graph_from_data_frame(d = link , directed = F, vertices = nodes )
net
net<-igraph::simplify(net)
deg_net <- igraph::degree(net, mode ='out')
clrvek_net <- pmax(0,pmin(deg_net,4))
clrname_net <- c('0'='lightgray','1'='#FF1744','2'='#F0A830','3'='#A155B9','4'='#165BAA')
ggnet2(net,size = 'outdegree', max_size = 3 ,color = clrvek_net, label = T, label.size = 2, legend.position = 'bottom', size.cut = 3, color.legend = 'clr~degree',palette = clrname_net)
c <- igraph::components(net, mode ='strong')
c
net.c <- induced_subgraph(net, V(net)[which(c$membership == 1)])
net.c <- igraph::simplify(net.c)
deg <- igraph::degree(net.c, mode ='out')
clrvek <- pmax(0,pmin(deg,4))
clrname <- c('0'='lightgray','1'='#FF1744','2'='#F0A830','3'='#A155B9','4'='#165BAA')
ggnet2(net.c,size = 'outdegree', max_size = 4 ,color = clrvek, label = T, label.size = 2, legend.position = 'bottom', size.cut = 5, color.legend = 'clr~degree',palette = clrname)
load('./file/Thyroid_carcinoma.RData')
View(raw_counts_df)
View(c_anno_df)
View(r_anno_df)
library(biomaRt)
library(tidyverse)
library(tidyverse)
listMarts()
ensembl <- useMart(biomart = 'ensembl', dataset = 'hsapiens_gene_ensembl')
filtering <- r_anno_df$ensembl_gene_id
query <- getBM(attributes = c('ensembl_gene_id', 'external_gene_name','gene_biotype'),filters = c('ensembl_gene_id'),values = list(filtering),mart = ensembl)
query_protein_coding <- query %>%
filter(gene_biotype == 'protein_coding')
r_anno_df_pro_cod <- r_anno_df %>%
filter(ensembl_gene_id %in% query_protein_coding$ensembl_gene_id)
raw_count_df_pro_cod <- raw_counts_df[which(rownames(raw_counts_df) %in% query_protein_coding$ensembl_gene_id),]
library(edgeR)
library(fgsea)
count_thr <- 20 # raw counts data retaining only genes with a raw count >20
repl_thr <- 5 # 5 Cases or 5 Control samples
filter_vec <- apply(raw_count_df_pro_cod,1, function(y) max(by(y,c_anno_df$condition, function(x) sum(x >= count_thr))))
#summary of the vector
table(filter_vec)
filter_count_df <- raw_count_df_pro_cod[filter_vec >= repl_thr,]
dim(filter_count_df) # the rows represent the number of transcripts that satisfy the threshold
filter_anno_df <- r_anno_df_pro_cod[rownames(filter_count_df),] # we filter the gene annotation file
dim(filter_anno_df) # the number of row is equal to the number of row of the file filter_count_df
edge_c <- DGEList(counts = filter_count_df, group = c_anno_df$condition, samples = c_anno_df, genes = filter_anno_df)
edge_c
edge_n <- calcNormFactors(edge_c,method = 'TMM')
edge_n # identical to edge_c just a column called normalization factor is added.
cpm_table <- as.data.frame(round(cpm(edge_n),2)) # the library size is scaled by the normalization factor
head(cpm_table)
###########################
cpm_table_log <- as.data.frame(round(log10(cpm(edge_n)+1),2))
head(cpm_table_log)
desing <- model.matrix(~0+group, data = edge_n$samples) # group correspond to the data
colnames(desing) <- levels(edge_n$samples$group)
rownames(desing) <- edge_n$samples$sample
desing
edge_d <- estimateDisp(edge_n,design = desing)
View(edge_d)
edge_f <- glmQLFit(edge_d,design = desing)
View(edge_f)
contro <- makeContrasts('case-control', levels = desing)
edge_t <- glmQLFTest(edge_f,contrast = contro) # contrin the results of the DE Analysis
View(edge_t)
DEGs <- as.data.frame(topTags(edge_t,n = 16748 ,p.value = 0.01,sort.by = 'logFC')) # 16748 becasue w e took into consideration all the vatiables inside edge_t, so 99 percent of singificativity of the test
View(DEGs)
DEGs$class <- '='
DEGs$class[which(DEGs$logCPM > 1 & DEGs$logFC > 1.5)] = '+'
DEGs$class[which(DEGs$logCPM > 1 & DEGs$logFC < (-1.5))] = '-'
DEGs <- DEGs[order(DEGs$logFC, decreasing = T),] # we order based on the fold change
View(DEGs)
table(DEGs$class)
input_df<-DEGs
xlabel<- "log2 FC control vs case"
ylabel<-"-log10 p-value"
par(fig=c(0,1, 0,1), mar=c(4,4,1,2), mgp=c(2, 0.75,0))
plot(DEGs$logFC,-log(DEGs$PValue, base=10), xlab=xlabel,ylab = ylabel, col=ifelse(DEGs$class=="=", "grey70", "olivedrab4"), pch=20, frame.plot=TRUE, cex=0.8, main="Volcano plot") %>%
abline(v = 0, lty = 2, col="grey20")
col <- rep('chartreuse4', 100)
col[which(c_anno_df$condition == 'case')] <- 'burlywood3'
pal <- c('blue','white','red')
pal <- colorRampPalette(pal)(100)
heatmap(as.matrix(cpm_table[which(rownames(cpm_table) %in% DEGs$ensembl_gene_id[which(DEGs$class != '=')]),]),ColSideColors = col, cexCol = 0.5,margins = c(4,4), col = pal, cexRow = 0.2)
heatmap(as.matrix(cpm_table_log[which(rownames(cpm_table_log) %in% DEGs$ensembl_gene_id[which(DEGs$class != '=')]),]),ColSideColors = col, cexCol = 0.5, margins = c(4,4), col = pal, cexRow = 0.2)
library(clusterProfiler)
library(org.Hs.eg.db)
convert<-getBM(attributes=c("ensembl_gene_id", "entrezgene_id", "external_gene_name"), filter=c("ensembl_gene_id"), values=DEGs$ensembl_gene_id, mart=ensembl)
DEGs<-merge(DEGs, convert, by.x = "ensembl_gene_id", by.y = "ensembl_gene_id")
DEGs<-DEGs[which(!is.na(DEGs$entrezgene_id)),]
DEGs<-DEGs[-which(duplicated(DEGs$entrezgene_id)),]
UPDegs <- DEGs %>% filter(class == '+') # up regulated
ego_BP_UP <- enrichGO(gene = UPDegs$external_gene_name.x, OrgDb = org.Hs.eg.db, keyType = 'SYMBOL', ont = 'BP',pAdjustMethod = 'BH',pvalueCutoff = 0.05, qvalueCutoff =  0.05)
View(ego_BP_UP)
barplot(ego_BP_UP,showCategory = 10) # first ten enriched terms
dotplot(ego_BP_UP, showCategory= 10)  # first ten enriched terms
heatplot(ego_BP_UP, showCategory = 2)  # gene associated with the top two enriched terms
head(ego_BP_UP,10)
ego_MF_UP <- enrichGO(gene = UPDegs$external_gene_name.x, OrgDb = org.Hs.eg.db, keyType = 'SYMBOL', ont = 'MF',pAdjustMethod = 'BH',pvalueCutoff = 0.05, qvalueCutoff =  0.05)
View(ego_MF_UP)
barplot(ego_MF_UP,showCategory = 10) # first ten enriched terms
dotplot(ego_MF_UP, showCategory= 10 ) # first ten enriched terms
heatplot(ego_MF_UP, showCategory = 2) # gene associated with the top two enriched terms
head(ego_MF_UP,10)
library(pathview)
eWP_UP<-enrichWP(gene=UPDegs$entrezgene_id, organism ='Homo sapiens',pvalueCutoff = 0.05, qvalueCutoff =  0.1)
head(eWP_UP, 10)
DWDegs <- DEGs %>% filter(class == '-')
# biologica process of GO analysis
ego_BP_DW <- enrichGO(gene = DWDegs$external_gene_name.x, OrgDb = org.Hs.eg.db, keyType = 'SYMBOL', ont = 'BP',pAdjustMethod = 'BH',pvalueCutoff = 0.05, qvalueCutoff =  0.05)
View(ego_BP_DW)
barplot(ego_BP_DW,showCategory = 10)
dotplot(ego_BP_DW, showCategory= 10) # orderby default x
heatplot(ego_BP_DW, showCategory = 2)
head(ego_BP_DW,10)
# molecular function GO
ego_MF_DW <- enrichGO(gene = DWDegs$external_gene_name.x, OrgDb = org.Hs.eg.db, keyType = 'SYMBOL', ont = 'MF',pAdjustMethod = 'BH',pvalueCutoff = 0.05, qvalueCutoff =  0.05)
View(ego_MF_DW)
barplot(ego_MF_DW,showCategory = 10)
dotplot(ego_MF_DW, showCategory= 10 )
heatplot(ego_MF_DW, showCategory = 2)
head(ego_MF_DW,10)
# KEGG enrichment
# enrichWP -> retrive the list of genes from the wiki pathways
eWP_DW<-enrichWP(gene=DWDegs$entrezgene_id, organism ='Homo sapiens',pvalueCutoff = 0.05, qvalueCutoff =  0.1)
head(eWP_DW, 10)
library(pathview)
logFC <-UPDegs$logFC
names(logFC) <-UPDegs$entrezgene_id
pathview(gene.data = logFC, pathway.id = 'hsa04928',species = 'human')
Seq_up <- getSequence(id = UPDegs$external_gene_name.x, type = 'hgnc_symbol',seqType = 'gene_flank', upstream = 500,mart = ensembl)
# gene_flank rapresnet the promoters of the genes
View(Seq_up)
library(MotifDb) # an annotateed collection of motifs
new_Seq <- DNAStringSet(Seq_up$gene_flank)
library(PWMEnrich) # for pattern matching
library(PWMEnrich.Hsapiens.background) # package containing background models
library(seqLogo) # plotting the seqLogo of the corresponding motifs
data("PWMLogn.hg19.MotifDb.Hsap")
res_initial = motifEnrichment(new_Seq,PWMLogn.hg19.MotifDb.Hsap,score = 'affinity')
TF_enrichment <- groupReport(res_initial)
TF_enrichment
plot(TF_enrichment[1:5]) # the first 5
tfs<-TF_enrichment$target[1]
tfmotif <- query(MotifDb,tfs)
PWM_tfs <- toPWM(as.list(tfmotif))
ecdf_tfs <- motifEcdf(PWM_tfs, organism = 'hg19', quick = T)
threshlod = log2(quantile(ecdf_tfs$`Hsapiens-hPDI-PDLIM5`, 1-25e-4))
# plot(ecdf_tfs$`Hsapiens-hPDI-PDLIM5`(v = knots(ecdf_tfs$`Hsapiens-hPDI-PDLIM5`)),main = 'ecdf distribution')
threshlod
score = motifScores(new_Seq, PWM_tfs, raw.scores = F, cutoff = threshlod)
length(which(apply(score,1,sum) > 0)) /length(score)
# we count the boxes that have alt least one score major that the threshold, then divided int for their number to get the frequency
write.table(unique(UPDegs$external_gene_name.x),sep = '\t', file = 'UPDEGs.txt',row.names = F, col.names = F, quote = T)
library(igraph)
library(GGally)
# we use the general deg
nodes <- getBM(attributes = c('external_gene_name','ensembl_gene_id','description','gene_biotype','start_position','end_position','chromosome_name',
'strand'), filters = c('ensembl_gene_id'), values =UPDegs$ensembl_gene_id, mart = ensembl)
nodes <- unique(nodes[ ,c(1,3:6)]) # colonna 1 piu da 3 a 6
link <- read.delim('string_interactions.tsv') # update the string file
link <- link %>%  filter(!link$X.node1 %in% c(setdiff(c(link$node2,link$X.node1), nodes$external_gene_name)) & !link$node2 %in% c(setdiff(c(link$node2,link$X.node1), nodes$external_gene_name)))
nodes <- nodes %>% filter(!nodes$external_gene_name %in% c(setdiff( nodes$external_gene_name,c(link$node2,link$X.node1))))
net <- graph_from_data_frame(d = link , directed = F, vertices = nodes )
net
net<-igraph::simplify(net)
deg_net <- igraph::degree(net, mode ='out')
clrvek_net <- pmax(0,pmin(deg_net,4))
clrname_net <- c('0'='lightgray','1'='#FF1744','2'='#F0A830','3'='#A155B9','4'='#165BAA')
ggnet2(net,size = 'outdegree', max_size = 3 ,color = clrvek_net, label = T, label.size = 2, legend.position = 'bottom', size.cut = 3, color.legend = 'clr~degree',palette = clrname_net)
c <- igraph::components(net, mode ='strong')
c
net.c <- induced_subgraph(net, V(net)[which(c$membership == 1)])
net.c <- igraph::simplify(net.c)
deg <- igraph::degree(net.c, mode ='out')
clrvek <- pmax(0,pmin(deg,4))
clrname <- c('0'='lightgray','1'='#FF1744','2'='#F0A830','3'='#A155B9','4'='#165BAA')
ggnet2(net.c,size = 'outdegree', max_size = 4 ,color = clrvek, label = T, label.size = 2, legend.position = 'bottom', size.cut = 5, color.legend = 'clr~degree',palette = clrname)
logFC <-UPDegs$logFC
names(logFC) <-UPDegs$entrezgene_id
pathview(gene.data = logFC, pathway.id = 'hsa04928',species = 'human')
# KEGG enrichment
# enrichWP -> retrive the list of genes from the wiki pathways
eWP_DW<-enrichWP(gene=DWDegs$entrezgene_id, organism ='Homo sapiens',pvalueCutoff = 0.05, qvalueCutoff =  0.1)
head(eWP_DW, 10)
head(eWP_DW, 10)
DWDegs <- DEGs %>% filter(class == '-')
# biologica process of GO analysis
ego_BP_DW <- enrichGO(gene = DWDegs$external_gene_name.x, OrgDb = org.Hs.eg.db, keyType = 'SYMBOL', ont = 'BP',pAdjustMethod = 'BH',pvalueCutoff = 0.05, qvalueCutoff =  0.05)
View(ego_BP_DW)
barplot(ego_BP_DW,showCategory = 10)
dotplot(ego_BP_DW, showCategory= 10) # orderby default x
heatplot(ego_BP_DW, showCategory = 2)
head(ego_BP_DW,10)
# molecular function GO
ego_MF_DW <- enrichGO(gene = DWDegs$external_gene_name.x, OrgDb = org.Hs.eg.db, keyType = 'SYMBOL', ont = 'MF',pAdjustMethod = 'BH',pvalueCutoff = 0.05, qvalueCutoff =  0.05)
View(ego_MF_DW)
barplot(ego_MF_DW,showCategory = 10)
dotplot(ego_MF_DW, showCategory= 10 )
heatplot(ego_MF_DW, showCategory = 2)
head(ego_MF_DW,10)
# KEGG enrichment
eWP_DW<-enrichWP(gene=DWDegs$entrezgene_id, organism ='Homo sapiens',pvalueCutoff = 0.05, qvalueCutoff =  0.1)
head(eWP_DW, 10)
DWDegs <- DEGs %>% filter(class == '-')
# biologica process of GO analysis
ego_BP_DW <- enrichGO(gene = DWDegs$external_gene_name.x, OrgDb = org.Hs.eg.db, keyType = 'SYMBOL', ont = 'BP',pAdjustMethod = 'BH',pvalueCutoff = 0.1, qvalueCutoff =  0.1)
View(ego_BP_DW)
barplot(ego_BP_DW,showCategory = 10)
dotplot(ego_BP_DW, showCategory= 10) # orderby default x
heatplot(ego_BP_DW, showCategory = 2)
head(ego_BP_DW,10)
# molecular function GO
ego_MF_DW <- enrichGO(gene = DWDegs$external_gene_name.x, OrgDb = org.Hs.eg.db, keyType = 'SYMBOL', ont = 'MF',pAdjustMethod = 'BH',pvalueCutoff = 0.1, qvalueCutoff =  0.1)
View(ego_MF_DW)
barplot(ego_MF_DW,showCategory = 10)
dotplot(ego_MF_DW, showCategory= 10 )
heatplot(ego_MF_DW, showCategory = 2)
head(ego_MF_DW,10)
# KEGG enrichment
eWP_DW<-enrichWP(gene=DWDegs$entrezgene_id, organism ='Homo sapiens',pvalueCutoff = 0.1, qvalueCutoff =  0.1)
head(eWP_DW, 10)
DWDegs$entrezgene_id
UPDegs$entrezgene_id
# KEGG enrichment
eWP_DW<-enrichWP(gene=DWDegs$entrezgene_id, organism ='Homo sapiens',pvalueCutoff = 0.5, qvalueCutoff =  0.5)
head(eWP_DW, 10)
View(eWP_DW)
View(eWP_DW)
eWP_DW@result
library(pathview)
logFC <-UPDegs$logFC
names(logFC) <-UPDegs$entrezgene_id
pathview(gene.data = logFC, pathway.id = 'hsa04928',species = 'human')
barplot(ego_BP_DW,showCategory = 10)
barplot(ego_MF_DW,showCategory = 10)
barplot(ego_BP_DW,showCategory = 10)
head(ego_BP_DW,10)
barplot(ego_BP_DW,showCategory = 10)
barplot(ego_MF_DW,showCategory = 10)
head(eWP_DW, 10)
plot(TF_enrichment[1:5]) # the first 5
plot(TF_enrichment[1:5],size = 5) # the first 5
